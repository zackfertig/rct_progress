name: Build portable binaries

# Ensure the workflow token can create/update releases
permissions:
  contents: write

on:
  workflow_dispatch: {}
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        python-version: ['3.11']

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install build deps
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller

      - name: Build rct-highscores (PyInstaller)
        run: |
          pyinstaller --onefile --name rct-highscores --paths src --hidden-import rct_progress.core build_highscores.py

      - name: Build rct-progress (PyInstaller)
        run: |
          pyinstaller --onefile --name rct-progress --paths src src/rct_progress/cli.py

      - name: Build macOS .app droplet (drag-and-drop)
        if: runner.os == 'macOS'
        run: |
          # Build a GUI .app that accepts dropped files as argv
          pyinstaller --windowed --name "RCT Highscores Droplet" --paths src --hidden-import rct_progress.core build_highscores.py
          # Zip the .app bundle for distribution
          mkdir -p artifacts
          ditto -c -k --sequesterRsrc --keepParent "dist/RCT Highscores Droplet.app" "artifacts/RCT-Highscores-Droplet-macos-x64.zip"

      - name: Build Linux AppImage (drag-and-drop via .desktop %F)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          set -e
          mkdir -p AppDir/usr/bin
          # Use the built onefile binary for the payload
          cp dist/rct-highscores AppDir/usr/bin/
          chmod +x AppDir/usr/bin/rct-highscores
          # Minimal AppRun forwarding args
          cat > AppDir/AppRun << 'EOF'
          #!/bin/sh
          exec "$APPDIR/usr/bin/rct-highscores" "$@"
          EOF
          chmod +x AppDir/AppRun
          # Desktop entry with multi-file support (%F)
          cat > AppDir/rct-highscores.desktop << 'EOF'
          [Desktop Entry]
          Type=Application
          Name=RCT Highscores
          Comment=Generate or merge OpenRCT2 highscores.dat from CSS0.DAT
          Exec=rct-highscores %F
          Terminal=false
          Categories=Utility;
          EOF
          # Fetch appimagetool
          curl -L -o appimagetool "https://github.com/AppImage/AppImageKit/releases/download/13/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          ./appimagetool AppDir RCT-Highscores-linux-x64.AppImage
          mkdir -p artifacts
          mv RCT-Highscores-linux-x64.AppImage artifacts/

      - name: Prepare artifacts
        shell: bash
        run: |
          set -e
          mkdir -p artifacts
          case "${{ runner.os }}" in
            Windows) PLATFORM=win-x64 ;;
            Linux) PLATFORM=linux-x64 ;;
            macOS) PLATFORM=macos-x64 ;;
            *) PLATFORM=unknown ;;
          esac
          echo "Platform: $PLATFORM"
          for bin in rct-highscores rct-progress; do
            for path in dist/$bin*; do
              [ ! -e "$path" ] && continue
              fname="$(basename "$path")"
              name="$fname"; ext=""
              if [[ "$fname" == *.exe ]]; then
                ext=".exe"; name="${fname%.exe}"
              fi
              mv "$path" "artifacts/${name}-${PLATFORM}${ext}"
            done
          done

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rct_progress-${{ github.ref_name }}-${{ runner.os }}
          path: artifacts/*

  package:
    name: Build Python sdist+wheel
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install build backend
        run: |
          python -m pip install --upgrade pip
          python -m pip install build

      - name: Build sdist+wheel
        run: |
          python -m build

      - name: Upload dists
        uses: actions/upload-artifact@v4
        with:
          name: rct_progress-${{ github.ref_name }}-python-dists
          path: |
            dist/*.whl
            dist/*.tar.gz

  release:
    name: Attach to GitHub Release
    needs: [build, package]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all-artifacts

      - name: Create/Update GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            all-artifacts/**
          token: ${{ secrets.GITHUB_TOKEN }}
